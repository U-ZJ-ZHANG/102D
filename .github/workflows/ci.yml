name: CI - Build, Test, and Deploy to Staging

on:
  push:
    branches:
      - testing 

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings -q

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and Push Docker Image
        if: success()
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/ecommerce:${{ github.sha }} .
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/ecommerce:${{ github.sha }}

  deploy-staging:
    needs: build-test-push
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RG }} --name ${{ secrets.AZURE_AKS }}

      - name: Deploy to Staging
        run: |
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/ -n staging

      - name: Run Acceptance Test
        run: |
          kubectl rollout status deployment/frontend-deployment -n staging --timeout=120s
          curl -f http://$(kubectl get svc frontend-service -n staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):8000 || exit 1

      - name: Destroy Staging Environment
        if: always()
        run: |
          kubectl delete namespace staging --ignore-not-found